name: Add Issue/Pull_Request to Project via GraphQL

on:
  workflow_call:
    inputs:
      item_id:
        required: true
        type: number
      project_number:
        required: true
        type: number      
    secrets:
      GH_TOKEN:
        required: true

jobs:
  add_to_project_with_status:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch project and field IDs
        id: metadata
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          ORG="CBNU-MoaNote-CapstonDesign"
          PROJECT_NUMBER= ${{ inputs.project_number }}

          echo "Fetching project ID..."
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
                organization(login: $org){
                    projectV2(number: $number) {
                        id
                        fields(first:20) {
                            nodes {
                                ... on ProjectV2SingleSelectField {
                                    id
                                    name
                                    options {
                                        id
                                        name
                                    }
                                }
                            }
                        }
                    }
                }
              } ' -f org=$ORG -F number=$PROJECT_NUMBER --jq '.data.organization.projectV2' | tee project_data.json

          PROJECT_ID=$(jq -r '.id' project_data.json)
          STATUS_FIELD_ID=$(jq -r '.fields.nodes[] | select(.name=="Status") | .id' project_data.json)
          TODO_OPTION_ID=$(jq -r '.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="Todo") | .id' project_data.json)

          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "status_field_id=$STATUS_FIELD_ID" >> $GITHUB_OUTPUT
          echo "todo_option_id=$TODO_OPTION_ID" >> $GITHUB_OUTPUT

      - name: Add issue to project
        id: add_item
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh api graphql -f query='
            mutation($project: ID!, $content: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $content}) {
                item {
                  id
                }
              }
            }' \
            -f project=${{ steps.metadata.outputs.project_id }} \
            -f content=${{ inputs.item_id }} \
            > result.json

          ITEM_ID=$(jq -r '.data.addProjectV2ItemById.item.id' result.json)
          echo "item_id=$ITEM_ID" >> $GITHUB_OUTPUT

      - name: Set field
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          ITEM_ID=${{ steps.add_item.outputs.item_id }}

          # Set Status to Todo
          gh api graphql -f query='
            mutation($project: ID!, $item: ID!, $field: ID!, $option: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project,
                itemId: $item,
                fieldId: $field,
                value: { singleSelectOptionId: $option }
              }) {
                projectV2Item { id }
              }
            }' \
            -f project=${{ steps.metadata.outputs.project_id }} \
            -f item=$ITEM_ID \
            -f field=${{ steps.metadata.outputs.status_field_id }} \
            -f option=${{ steps.metadata.outputs.todo_option_id }}
